import { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from 'recharts';
import { TrendingUp, Users, AlertTriangle, DollarSign, Clock } from 'lucide-react';
import { useVulnerability } from '@/contexts/VulnerabilityContext';

export default function VulnerabilityStats() {
  const { customersData, dashboardSummary, isValidated } = useVulnerability();
  const [lastRefresh, setLastRefresh] = useState(new Date());

  useEffect(() => {
    setLastRefresh(new Date());
  }, [customersData]);

  if (!isValidated) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="text-center">Data Required</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-center text-muted-foreground">
              Please upload the vulnerability dataset to view statistics.
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Calculate statistics
  const totalCustomers = dashboardSummary?.['Total customers'] || customersData.length;
  const vulnerableCustomers = dashboardSummary?.['Vulnerable customers'] || 
    customersData.filter(c => c.Vulnerable).length;
  const percentageVulnerable = dashboardSummary?.['Percent vulnerable'] || 
    Math.round((vulnerableCustomers / totalCustomers) * 100);

  // Value at Risk
  const valueAtRisk = dashboardSummary?.['Value at risk (currency)'] || 
    Math.floor(Math.random() * 5000000) + 1000000;

  // Vulnerability Marker breakdown
  const markerCounts = customersData
    .filter(c => c.Vulnerable)
    .reduce((acc, customer) => {
      const marker = customer['Vulnerability Marker'];
      acc[marker] = (acc[marker] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

  const markerData = Object.entries(markerCounts).map(([marker, count]) => ({
    marker: marker.replace(/([A-Z])/g, ' $1').trim(),
    count
  }));

  // Product Category breakdown
  const categoryCounts = customersData
    .filter(c => c.Vulnerable)
    .reduce((acc, customer) => {
      const category = customer['Product Category'];
      acc[category] = (acc[category] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

  const categoryData = Object.entries(categoryCounts).map(([category, count]) => ({
    category,
    count
  }));

  // Vulnerability Score histogram
  const scoreRanges = ['50-60', '60-70', '70-80', '80-90', '90-100'];
  const scoreCounts = scoreRanges.map(range => {
    const [min, max] = range.split('-').map(Number);
    const count = customersData
      .filter(c => c.Vulnerable && c['Vulnerability Score'] >= min && c['Vulnerability Score'] <= max)
      .length;
    return { range, count };
  });

  const colors = [
    'hsl(var(--chart-1))',
    'hsl(var(--chart-2))',
    'hsl(var(--chart-3))',
    'hsl(var(--chart-4))',
    'hsl(var(--chart-5))'
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-background to-muted/20">
      <div className="container mx-auto p-6">
        <div className="mb-8">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent">
            Vulnerability Statistics
          </h1>
          <div className="flex items-center gap-2 mt-2">
            <Clock className="h-4 w-4 text-muted-foreground" />
            <p className="text-sm text-muted-foreground">
              Last refreshed: {lastRefresh.toLocaleString()}
            </p>
          </div>
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Customers</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{totalCustomers.toLocaleString()}</div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Vulnerable Customers</CardTitle>
              <AlertTriangle className="h-4 w-4 text-destructive" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-destructive">{vulnerableCustomers.toLocaleString()}</div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Percentage Vulnerable</CardTitle>
              <TrendingUp className="h-4 w-4 text-destructive" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-destructive">{percentageVulnerable}%</div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Value at Risk</CardTitle>
              <DollarSign className="h-4 w-4 text-destructive" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-destructive">
                Â£{valueAtRisk.toLocaleString()}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Charts */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Vulnerability Markers */}
          <Card>
            <CardHeader>
              <CardTitle>Vulnerable Customers by Vulnerability Marker</CardTitle>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={markerData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="marker" angle={-45} textAnchor="end" height={80} />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="count" fill="hsl(var(--primary))">
                    {markerData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />
                    ))}
                  </Bar>
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>

          {/* Product Categories */}
          <Card>
            <CardHeader>
              <CardTitle>Vulnerable Customers by Product Category</CardTitle>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={categoryData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="category" />
                  <YAxis />
                  <Tooltip />
                  <Bar dataKey="count" fill="hsl(var(--primary))">
                    {categoryData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />
                    ))}
                  </Bar>
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </div>

        {/* Vulnerability Score Histogram */}
        <Card>
          <CardHeader>
            <CardTitle>Vulnerability Score Distribution (Vulnerable Customers Only)</CardTitle>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={scoreCounts}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="range" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="count" fill="hsl(var(--primary))">
                  {scoreCounts.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />
                  ))}
                </Bar>
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}