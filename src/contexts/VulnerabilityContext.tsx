import { createContext, useContext, useState, ReactNode } from 'react';

export interface TimeSeriesData {
  'Customer ID': string;
  'First Name': string;
  'Surname': string;
  'Product Category': string;
  'Product': string;
  'Vulnerability Marker': string;
  'Trigger Month': string;
  'Month': string;
  'Metric': string;
  'Metric_Value': number;
}

export interface CustomerData {
  'Customer ID': string;
  'Customer Name': string;
  'Vulnerable': boolean;
  'Vulnerability Score': number;
  'Vulnerability Score Band': string;
  'Vulnerability Marker': string;
  'Product Category': string;
  'Product': string;
  'Trigger Month': string;
  'Recommended Action': string;
  'Products Held': string;
  'Commentary': string;
}

export interface DashboardSummary {
  'Total customers': number;
  'Vulnerable customers': number;
  'Percent vulnerable': number;
  'Value at risk (currency)': number;
}

interface VulnerabilityContextType {
  timeSeriesData: TimeSeriesData[];
  customersData: CustomerData[];
  dashboardSummary: DashboardSummary | null;
  isFileUploaded: boolean;
  isValidated: boolean;
  validationErrors: string[];
  setTimeSeriesData: (data: TimeSeriesData[]) => void;
  setCustomersData: (data: CustomerData[]) => void;
  setDashboardSummary: (data: DashboardSummary | null) => void;
  setFileUploaded: (uploaded: boolean) => void;
  setValidated: (validated: boolean) => void;
  setValidationErrors: (errors: string[]) => void;
  resetData: () => void;
}

const VulnerabilityContext = createContext<VulnerabilityContextType | undefined>(undefined);

export function VulnerabilityProvider({ children }: { children: ReactNode }) {
  const [timeSeriesData, setTimeSeriesData] = useState<TimeSeriesData[]>([]);
  const [customersData, setCustomersData] = useState<CustomerData[]>([]);
  const [dashboardSummary, setDashboardSummary] = useState<DashboardSummary | null>(null);
  const [isFileUploaded, setFileUploaded] = useState(false);
  const [isValidated, setValidated] = useState(false);
  const [validationErrors, setValidationErrors] = useState<string[]>([]);

  const resetData = () => {
    setTimeSeriesData([]);
    setCustomersData([]);
    setDashboardSummary(null);
    setFileUploaded(false);
    setValidated(false);
    setValidationErrors([]);
  };

  return (
    <VulnerabilityContext.Provider value={{
      timeSeriesData,
      customersData,
      dashboardSummary,
      isFileUploaded,
      isValidated,
      validationErrors,
      setTimeSeriesData,
      setCustomersData,
      setDashboardSummary,
      setFileUploaded,
      setValidated,
      setValidationErrors,
      resetData
    }}>
      {children}
    </VulnerabilityContext.Provider>
  );
}

export function useVulnerability() {
  const context = useContext(VulnerabilityContext);
  if (context === undefined) {
    throw new Error('useVulnerability must be used within a VulnerabilityProvider');
  }
  return context;
}