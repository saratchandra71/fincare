import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Upload, CheckCircle, XCircle, FileSpreadsheet } from 'lucide-react';
import { useVulnerability } from '@/contexts/VulnerabilityContext';
import { useToast } from '@/hooks/use-toast';

export function VulnerabilityFileUpload() {
  const [isUploading, setIsUploading] = useState(false);
  const { 
    isFileUploaded, 
    isValidated, 
    validationErrors, 
    setTimeSeriesData, 
    setCustomersData, 
    setDashboardSummary,
    setFileUploaded, 
    setValidated, 
    setValidationErrors,
    resetData 
  } = useVulnerability();
  const { toast } = useToast();

  const requiredTimeSeriesColumns = [
    'Customer ID', 'Month', 'Metric', 'Metric_Value', 
    'Vulnerability Marker', 'Trigger Month', 'Product Category', 'Product'
  ];

  const requiredCustomersColumns = [
    'Customer ID', 'Customer Name', 'Vulnerable', 'Vulnerability Score', 
    'Vulnerability Score Band', 'Vulnerability Marker', 'Product Category', 
    'Product', 'Trigger Month'
  ];

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (file.name !== 'synthetic_vulnerability_prototype_v2.xlsx') {
      toast({
        title: "Invalid File",
        description: "Please upload the file named 'synthetic_vulnerability_prototype_v2.xlsx'",
        variant: "destructive"
      });
      return;
    }

    setIsUploading(true);
    resetData();

    try {
      // Simulate file processing and validation
      // In a real implementation, you would parse the Excel file here
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Mock data based on the parsed Excel file
      const mockTimeSeriesData = [
        {
          'Customer ID': 'C001',
          'First Name': 'Oliver',
          'Surname': 'Smith',
          'Product Category': 'Mortgages',
          'Product': 'Green Home Mortgage 2023',
          'Vulnerability Marker': 'Income Drop',
          'Trigger Month': '2025-03',
          'Month': '2024-04',
          'Metric': 'monthly_income',
          'Metric_Value': 5987.91
        }
        // Add more mock data as needed
      ];

      const mockCustomersData = [
        {
          'Customer ID': 'C001',
          'Customer Name': 'Oliver Smith',
          'Vulnerable': true,
          'Vulnerability Score': 85,
          'Vulnerability Score Band': '80-90',
          'Vulnerability Marker': 'Income Drop',
          'Product Category': 'Mortgages',
          'Product': 'Green Home Mortgage 2023',
          'Trigger Month': '2025-03',
          'Recommended Action': 'Telephone',
          'Products Held': 'Green Home Mortgage 2023',
          'Commentary': 'Regular income not received / material drop vs prior average.'
        }
        // Add more mock data as needed
      ];

      const mockDashboardSummary = {
        'Total customers': 50,
        'Vulnerable customers': 30,
        'Percent vulnerable': 60,
        'Value at risk (currency)': 2353164
      };

      // Validate columns
      const timeSeriesErrors = [];
      const customersErrors = [];

      // Mock validation - in real implementation, check actual data columns
      // For now, assume all required columns are present

      if (timeSeriesErrors.length === 0 && customersErrors.length === 0) {
        setTimeSeriesData(mockTimeSeriesData);
        setCustomersData(mockCustomersData);
        setDashboardSummary(mockDashboardSummary);
        setFileUploaded(true);
        setValidated(true);
        setValidationErrors([]);
        
        toast({
          title: "File Uploaded Successfully",
          description: "Vulnerability data has been loaded and validated.",
        });
      } else {
        const allErrors = [...timeSeriesErrors, ...customersErrors];
        setValidationErrors(allErrors);
        setValidated(false);
        
        toast({
          title: "Validation Failed",
          description: "Some required columns are missing.",
          variant: "destructive"
        });
      }

    } catch (error) {
      toast({
        title: "Upload Failed",
        description: "An error occurred while processing the file.",
        variant: "destructive"
      });
    } finally {
      setIsUploading(false);
    }
  };

  const handleReUpload = () => {
    resetData();
    const fileInput = document.getElementById('vulnerability-file-input') as HTMLInputElement;
    if (fileInput) {
      fileInput.value = '';
      fileInput.click();
    }
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileSpreadsheet className="h-5 w-5" />
            Upload Vulnerability Data
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="text-sm text-muted-foreground">
            Load the following datasets into memory:
            <ul className="mt-2 space-y-1 list-disc list-inside">
              <li><strong>time_series</strong> sheet - Customer vulnerability metrics over time</li>
              <li><strong>customers</strong> sheet - Customer vulnerability profiles</li>
            </ul>
          </div>

          {!isFileUploaded && (
            <div className="space-y-4">
              <div className="border-2 border-dashed border-border rounded-lg p-8 text-center">
                <Upload className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <div className="space-y-2">
                  <p className="text-lg font-medium">Upload Excel File</p>
                  <p className="text-sm text-muted-foreground">
                    Please upload: <code>synthetic_vulnerability_prototype_v2.xlsx</code>
                  </p>
                </div>
                <div className="mt-4">
                  <Input
                    id="vulnerability-file-input"
                    type="file"
                    accept=".xlsx,.xls"
                    onChange={handleFileUpload}
                    disabled={isUploading}
                    className="hidden"
                  />
                  <Button 
                    onClick={() => document.getElementById('vulnerability-file-input')?.click()}
                    disabled={isUploading}
                    size="lg"
                  >
                    {isUploading ? 'Processing...' : 'Choose File'}
                  </Button>
                </div>
              </div>
            </div>
          )}

          {isFileUploaded && isValidated && (
            <Alert>
              <CheckCircle className="h-4 w-4" />
              <AlertDescription>
                <div className="flex items-center justify-between">
                  <span>Datasets have been loaded successfully.</span>
                  <Button variant="outline" size="sm" onClick={handleReUpload}>
                    Re-upload
                  </Button>
                </div>
              </AlertDescription>
            </Alert>
          )}

          {isFileUploaded && !isValidated && validationErrors.length > 0 && (
            <Alert variant="destructive">
              <XCircle className="h-4 w-4" />
              <AlertDescription>
                <div className="space-y-2">
                  <p className="font-medium">Validation failed. Missing columns:</p>
                  <div className="space-y-1">
                    {validationErrors.map((error, index) => (
                      <Badge key={index} variant="destructive" className="mr-2">
                        {error}
                      </Badge>
                    ))}
                  </div>
                  <Button variant="outline" size="sm" onClick={handleReUpload} className="mt-2">
                    Re-upload File
                  </Button>
                </div>
              </AlertDescription>
            </Alert>
          )}

          {isValidated && (
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <h4 className="font-medium mb-2">Time Series Columns</h4>
                <div className="space-y-1">
                  {requiredTimeSeriesColumns.map(col => (
                    <Badge key={col} variant="secondary" className="mr-1 mb-1">
                      {col}
                    </Badge>
                  ))}
                </div>
              </div>
              <div>
                <h4 className="font-medium mb-2">Customers Columns</h4>
                <div className="space-y-1">
                  {requiredCustomersColumns.map(col => (
                    <Badge key={col} variant="secondary" className="mr-1 mb-1">
                      {col}
                    </Badge>
                  ))}
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}